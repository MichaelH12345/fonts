<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-ascale=1.0">
    <title>Background Iframe</title>
    <style>
        /* Font imports */
        @font-face {
            font-family: 'AvertaBold';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/AvertaBold-_1_.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Averta';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/Averta-_1_.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Thin Averta';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/averta_bigfontsite.com.otf') format('opentype');
            font-weight: normal;
            font-style: normal;
        }
        @font-face {
            font-family: 'Operator Font';
            src: url('https://raw.githubusercontent.com/MichaelH12345/fonts/main/averta_bigfontsite.com.otf') format('opentype');
            font-weight: normal;
            font-style: normal;
        }
        
        /* Body styles */
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: #141d2c; /* Background color of the whole page */
        }
        
        /* Background image */
        .background {
            position: fixed;
            top: 15px; /* 15 pixels from the top */
            left: 30px; /* 30 pixels from the left */
            z-index: -1;
        }
        .background img {
            width: 50px; /* 50% smaller width */
            height: auto; /* Maintain aspect ratio */
        }
        
        /* Iframe container */
        .iframe-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1;
        }
        .iframe-container iframe {
            width: 1080px;
            height: 1920px;
            border: none;
        }
        
        /* Text styles */
        .text-box {
            position: absolute;
            left: 60px; /* Start 60 pixels from the very left */
            top: 7.5px; /* 10 pixels from the very top */
            font-family: 'AvertaBold', sans-serif; /* Specify the font */
            font-size: 70px; /* Text size */
            color: white;
            height: auto; /* Set height to auto initially */
        }
        .time {
            position: absolute;
            left: 30px; /* Start 30 pixels from the very left */
            top: 100px; /* 100 pixels from the very top */
            font-family: 'Averta', sans-serif; /* Specify the font */
            font-size: 35px; /* Text size */
            color: white;
            white-space: nowrap; /* Prevent wrapping */
            width: calc(100% - 30px); /* Stretch across to the very right */
        }
        .time div {
            display: inline-block;
            padding-right: 50px; /* Adjust the spacing between words */
        }
        .line {
            position: absolute;
            top: 155px; /* 10 pixels underneath the 'time' text box */
            left: 0; /* Start from the very left */
            width: 100%; /* Stretch across the entire width */
            height: 3px; /* Medium thickness */
            background-color: #FF4713; /* Orange color */
        }
        
        /* Live train services */
        .live-train-services {
            position: absolute;
            top: 160px; /* Adjust based on your layout */
            left: 0;
            width: 100%;
            padding: 20px;
            color: white;
            font-family: 'Averta', sans-serif;
            font-size: 50px; /* Adjusted text size */
        }
        .live-train-services ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .live-train-services li {
            margin-bottom: 10px; /* Increased margin bottom */
            padding-bottom: 70px;
            border-bottom: 3px solid white;
            display: flex; /* Use flexbox */
            justify-content: 0px; /* Align items to the start */
            align-items: center; /* Align items vertically */
            flex-wrap: wrap; /* Allow wrapping */
        }
        .live-train-services li div {
            flex: 1; /* Distribute equal space */
}

.live-train-services li .destination {
    position: absolute;
    text-align: left;
    left: 205px; /* Adjust left position for positioning */
    width: calc(100% - 170px); /* Decrease width of container */
    white-space: nowrap;
    overflow: hidden;
}


.live-train-services li .platform {
    position: absolute;
    text-align: right;
    right: 875px; /* Adjust right position for positioning */
    width: 100px; /* Adjust width as needed */
    white-space: nowrap;
    overflow: hidden;
}

.live-train-services li .status {
    position: absolute;
    text-align: right;
    right: 595px; /* Adjust right position for positioning */
    color: white;
}

.live-train-services li .operator {
    position: relative;
    text-align: left;
    right: 775px;/* Adjust left position for positioning */
    top: 60px; /* Move down by 50px */
    width: calc(100% - 170px); /* Decrease width of container */
    white-space: nowrap;
    overflow: hidden;
    font-family: 'Thin Averta', sans-serif; /* Change font to Thin Averta */
}



        
        /* Orange box */
        .orange-box {
            position: absolute;
            bottom: 0; /* Start at the very bottom */
            left: 0; /* Align with the left side of the iframe */
            height: 85px; /* Set the height to 50 pixels */
            width: 100%; /* Make it span the entire width of the iframe */
            background-color: #FF4713; /* Change the background color */
        }
    </style>
</head>
<body>
    <!-- Background image -->
    <div class="background">
        <img id="image" src="https://raw.githubusercontent.com/MichaelH12345/fonts/main/download%20(1).png" alt="Image" onload="updateTextBoxPosition()">
    </div>
    
    <!-- Text boxes -->
    <div class="text-box">Departures</div>
    <div class="time">
        <div>Time</div>
        <div style="padding-left: 35px;">Destination</div>
        <div style="padding-left: 500px;">Platform</div>
        <div style="padding-left: 125px;">Status</div>
        <div style="padding-left: 0px;">Facilities & Reservations</div>
    </div>
    
    <!-- Line -->
    <div class="line"></div>
    
<!-- Live train services section -->
<div class="live-train-services" id="liveTrainServices">
    <ul id="liveTrainList"></ul>
</div>

    
    <!-- Iframe container -->
    <div class="iframe-container">
        <iframe src="https://raw.githubusercontent.com/MichaelH12345/fonts/main/download%20(1).png"></iframe>
    </div>
    
    <!-- Orange box -->
    <div class="orange-box"></div>
    <div class="alert-text" id="scrollingText"></div>

    

<script>
    async function fetchAndDisplayLiveTrainServices() {
        try {
            const response = await fetch('https://national-rail-api.davwheat.dev/staffdepartures/YRK?expand=true');
            const data = await response.json();
            const trainServices = data.trainServices;

            const liveTrainList = document.getElementById('liveTrainList');
            liveTrainList.innerHTML = ''; // Clear existing data

            if (trainServices.length === 0) {
                // If no live train services available
                liveTrainList.innerHTML = "<li>No live train services available.</li>";
            } else {
                // Generate and append live train service list items
                trainServices.forEach(service => {
    const listItem = document.createElement('li');
    const destination = service.destination[0].locationName;
    const platform = service.platform || '-';
    const operator = service.operator ? service.operator : '-';

    // Extracting time from std and etd fields
    let std = service.std ? formatDepartureTime(service.std) : '-';
    const etd = service.etd ? formatDepartureTime(service.etd) : '-';

    // Determine status based on cancellation status
    let status;
    let color; // Variable to store text color
    if (service.isCancelled) {
        status = 'Cancelled';
        color = '#FF4713'; // Set text color to orange for Cancelled status
    } else if (etd === '00:00') {
        status = 'Delayed';
        color = 'white'; // Set text color to white for Delayed status
    } else if (std === etd) {
        status = 'On Time';
        color = 'white'; // Set text color to white for On Time status
    } else {
        status = etd;
        color = 'white'; // Set text color to white for other statuses
    }

listItem.innerHTML = `
    <div>${std}</div>
    <div class="destination">${destination}</div>
    <div class="platform">${platform}</div>
    <div class="status" style="color: ${color};">${status}</div>
    <div class="operator">${operator}</div>
`;


    liveTrainList.appendChild(listItem);
});

            }
        } catch (error) {
            console.error('Error fetching live train services:', error);
        }
    }

    function updateTextBoxPosition() {
        var imageLeft = document.querySelector('.background').offsetLeft;
        document.querySelector('.text-box').style.left = (imageLeft + 60) + 'px';
    }

    // Function to format departure time
    function formatDepartureTime(timeString) {
        return timeString.slice(11, 16);
    }

    // Fetch and display live train services initially and then every minute
    window.onload = function() {
        fetchAndDisplayLiveTrainServices();
        setInterval(fetchAndDisplayLiveTrainServices, 15000); // Update every minute (60,000 milliseconds)
    };
</script>

</body>
</html>
